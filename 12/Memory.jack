// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array memory;
    static int heapBottom;
    static int heapBase;
    static int LENGTH;
    static int NEXT;
    static int ALLOC_LENGTH;

    /** Initializes the class. */
    function void init() {
		let heapBase = 2048;
        let heapBottom = 16384;
        let memory = 0;
        let LENGTH = 0;
        let NEXT = 1;
        let ALLOC_LENGTH = -1;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var Array foundBlock,nextBlock,result;
        let foundBlock = Memory.bestFit(size);
        let result = foundBlock + 1;
        let nextBlock = foundBlock[NEXT];
        let result[ALLOC_LENGTH] = foundBlock[LENGTH];           
        let foundBlock = nextBlock;      
        return result;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var Array preBlock,nextBlock;
        var int size;
        let size = object[ALLOC_LENGTH];
        let object = object - 1;
        let preBlock = Memory.findPreFree(object);

        if((object + object[LENGTH]) = object[NEXT]){
            let nextBlock = object[NEXT];
            let object[LENGTH] = object[LENGTH] + nextBlock[LENGTH];
            let object[NEXT] = nextBlock[NEXT];
        }
        return;
    }    
}